datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Use Prisma Schema file to define your entities: https://www.prisma.io/docs/concepts/components/prisma-schema.
// Run `wasp db migrate-dev` in the CLI to create the database tables,
// then run `wasp db studio` to open Prisma Studio and view your db models.
model User {
  id       String @id @default(uuid())
  username String

  tasks Task[]
  tags  Tag[]
}

model Task {
  id          String   @id @default(uuid())
  description String
  isDone      Boolean  @default(false)
  createdAt   DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tags Tag[]
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  color String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tasks Task[]
}

// --- AI Proxy Models ---

model ApiClient {
  id           String   @id @default(uuid())
  name         String
  apiKeyHash   String   // Stocker uniquement le hash de la clé API
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  logs         LogEntry[]

  @@index([name])
}

model BlacklistTerm {
  id        String   @id @default(uuid())
  term      String   @unique
  riskType  String // 'PII' | 'JAILBREAK' | 'TOXICITY' | 'OTHER'
  createdAt DateTime @default(now())

  @@index([riskType])
}

model LogEntry {
  id                 String       @id @default(uuid())
  createdAt          DateTime     @default(now())

  // Métadonnées
  triggeredByUserId  String?
  endUserId          String?      // id technique côté client appelant
  client             ApiClient?   @relation(fields: [clientId], references: [id])
  clientId           String?
  sourceIp           String?
  userAgent          String?
  metadata           String? // JSON string

  // Décision
  decision           String       // 'ALLOW' | 'MASK' | 'BLOCK'
  riskTypes          String?      // JSON string array of RiskType
  riskScore          Int?
  isFalsePositive    Boolean      @default(false)

  // Données chiffrées au repos (AES-GCM)
  promptCiphertext   String
  promptIv           String
  promptAuthTag      String

  responseCiphertext String?
  responseIv         String?
  responseAuthTag    String?

  model              String?      // modèle LLM
  promptTokens       Int?
  completionTokens   Int?
  totalTokens        Int?

  @@index([createdAt])
  @@index([clientId])
}

model ProviderCredential {
  id            String   @id @default(uuid())
  provider      String   // e.g. 'openai'
  keyCiphertext String
  keyIv         String
  keyAuthTag    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Optionnel: scoper à un utilisateur, sinon global (null)
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([provider])
  @@index([userId])
}

model ApiToken {
  id         String   @id @default(uuid())
  name       String
  tokenHash  String   @unique
  createdAt  DateTime @default(now())
  revokedAt  DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}
